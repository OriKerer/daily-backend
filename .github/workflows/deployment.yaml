name: "GCP Deployment "

on:
  push:
    branches: [master]
  pull_request:

permissions:
  contents: "read"
  id-token: "write"

env:
  TF_VAR_region: us-east1
  TF_VAR_zone: us-east1-b
  TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
  TF_VAR_artifact_repository_name: container-images
  daily_image_name: daily

jobs:
  terraform:
    runs-on: ubuntu-latest
    needs: container

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set environment variables for job
        run: |
          echo \
          "TF_VAR_daily_image_url=${{ env.TF_VAR_region }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.TF_VAR_artifact_repository_name }}/${{ env.daily_image_name }}:latest" \
          >> $GITHUB_ENV
          echo "TF_VAR_revision_name=${{ env.daily_image_name }}-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform format
        run: terraform fmt -check
        id: fmt
        working-directory: terraform/

      - name: Terraform Init
        run: terraform init
        id: init
        working-directory: terraform/

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        working-directory: terraform/

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: terraform/

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: terraform/

  container:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set environment variables for job
        run: |
          echo \
          "repository_url=${{ env.TF_VAR_region }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.TF_VAR_artifact_repository_name }}" \
          >> $GITHUB_ENV

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate to Google Cloud
        if: github.event_name != 'pull_request'
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        if: github.event_name != 'pull_request'
        uses: google-github-actions/setup-gcloud@v0

      - name: Setup docker credential helper
        if: github.event_name != 'pull_request'
        run: gcloud auth configure-docker ${{ env.TF_VAR_region }}-docker.pkg.dev

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.repository_url }}/${{ env.daily_image_name}}:latest

      - name: Prune untagged images
        if: github.event_name != 'pull_request'
        run: |
          gcloud artifacts docker images list ${{ env.repository_url }} \
          --include-tags  --filter='-tags:*' --format='get(DIGEST)' \
          | awk '{print "${{ env.repository_url }}/${{ env.daily_image_name}}@" $1}' \
          | xargs --no-run-if-empty -L 1  gcloud artifacts docker images delete --quiet
